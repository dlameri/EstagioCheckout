<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	   		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
			http://www.springframework.org/schema/security 
			http://www.springframework.org/schema/security/spring-security-3.1.xsd">

	<!-- This is where we configure Spring-Security  -->
	<http auto-config="true" use-expressions="true" access-denied-page="/auth/denied" >
	
		<intercept-url pattern="/auth/login" access="permitAll"/>
		<intercept-url pattern="/main/admin" access="hasRole('ROLE_ADMIN')"/>
		<intercept-url pattern="/main/common" access="hasRole('ROLE_USER')"/>
		
		<form-login 
				login-page="/auth/login" 
				authentication-failure-url="/auth/login?error=true" 
				default-target-url="/main/common"/>
		
		<logout 
				invalidate-session="true" 
				logout-success-url="/auth/login" 
				logout-url="/auth/logout"/>
				
	</http>
	
	<!-- Declare an authentication-manager to use a custom userDetailsService -->
	<authentication-manager>
	        <authentication-provider user-service-ref="customUserDetailsService">
	        		<password-encoder ref="passwordEncoder"/>
	        </authentication-provider>
	</authentication-manager>

	<!-- Use a Md5 encoder since the user's passwords are stored as Md5 in the database -->
	<beans:bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" id="passwordEncoder"/>

	<!-- A custom service where Spring will retrieve users and their corresponding access levels  -->
	<beans:bean id="customUserDetailsService" class="com.ideais.spring.service.CustomUserDetailsService"/>
	
</beans:beans>
